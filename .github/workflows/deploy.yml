name: Deploy Pages

# 触发条件，push到main分支或者pull request到main分支
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # 支持手动在工作流上触发
  workflow_dispatch:

# 设置时区
env:
  TZ: Asia/Nanjing

# 权限设置
permissions:
  # 允许读取仓库内容的权限。
  contents: read
  # 允许写入 GitHub Pages 的权限。
  pages: write
  # 允许写入 id-token 的权限。
  id-token: write

# 并发控制配置
concurrency:
  group: pages
  cancel-in-progress: false

# 定义执行任务
jobs:
  # 构建任务
  build:

    runs-on: ubuntu-latest

    # node v20 运行
    strategy:
      matrix:
        node-version: [20]

    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 保留 Git 信息
          fetch-depth: 0

      # 设置使用 Node.js 版本
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # 使用 最新的 PNPM
      # 你也可以指定为具体的版本
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: latest
          # version: 9
          run_install: false

        # 安装依赖
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        # 锁定依赖版本
        # run: pnpm install --frozen-lockfile

        # 构建项目
      - name: Build blog project
        run: |
          echo ${{ github.workspace }}
          pnpm build

      - name: Configure COS
        env:
          COS_SECRET_ID: ${{ secrets.SECRETID }}
          COS_SECRET_KEY: ${{ secrets.SECRETKEY }}
          COS_BUCKET: pangtouyu-1320549472
          COS_REGION: ap-nanjing
        run: |
          pnpm install cos-nodejs-sdk-v5
          node <<EOF
          const fs = require('fs');
          const path = require('path');
          const COS = require('cos-nodejs-sdk-v5');
          const upload = ({ dirURL, prefix = '', secretId, secretKey, bucket, region }) => {
              const cos = new COS({ SecretId: secretId, SecretKey: secretKey });
              recursion({ sourseDirURL: dirURL, dirURL, prefix, bucket, region, cos })
          }
          const recursion = ({ sourseDirURL, dirURL, prefix = '', bucket, region, cos }) => {
              const files = fs.readdirSync(dirURL);
              for (const file of files) {
                  const fullPath = path.join(dirURL, file);
                  const stat = fs.statSync(fullPath);
                  if (stat.isDirectory()) {
                      recursion({ sourseDirURL, dirURL: fullPath, prefix, bucket, region, cos })
                  } else {
                      uploadFile(path.join(prefix, fullPath.replace(sourseDirURL, '')), fullPath, bucket, region, cos);
                  }
              }
              !files.length && uploadDir(path.join(prefix, dirURL.replace(sourseDirURL, '')), bucket, region, cos)
          }
          const uploadFile = (key, filePath, bucket, region, cos) => {
              if (!filePath.length) return
              cos.uploadFile({ Bucket: bucket, Region: region, Key: key, FilePath: filePath });
          }
          const uploadDir = (dirURL, bucket, region, cos) => {
              if (!dirURL.length) return
              cos.putObject({ Bucket: bucket, Region: region, Key: dirURL + '/', Body: '' });
          }
          upload({
              dirURL: path.resolve(__dirname, './docs/.vitepress/dist'),
              secretId: process.env.COS_SECRET_ID,
              secretKey: process.env.COS_SECRET_KEY,
              bucket: process.env.COS_BUCKET,
              region: process.env.COS_REGION
          })
          EOF
